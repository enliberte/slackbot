"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var express_1 = __importDefault(require("express"));
var body_parser_1 = __importDefault(require("body-parser"));
var cookie_parser_1 = __importDefault(require("cookie-parser"));
var DeveloperController_1 = __importDefault(require("./controllers/DeveloperController"));
var SubscribeController_1 = __importDefault(require("./controllers/SubscribeController"));
var RepositoryController_1 = __importDefault(require("./controllers/RepositoryController"));
var ServicesFactory_1 = __importDefault(require("./services/factories/ServicesFactory"));
var NotifyController_1 = __importDefault(require("./controllers/NotifyController"));
var Services_1 = __importDefault(require("./services/Services"));
var AuthController_1 = __importDefault(require("./controllers/AuthController"));
var HelpController_1 = __importDefault(require("./controllers/HelpController"));
var RTMController_1 = __importDefault(require("./controllers/RTMController"));
var UserController_1 = __importDefault(require("./controllers/UserController"));
var mongoose_1 = require("mongoose");
var _a = require('./../../config'), PORT = _a.PORT, MONGO_URI = _a.MONGO_URI;
mongoose_1.connect(MONGO_URI, { useNewUrlParser: true, keepAlive: true });
var app = express_1.default();
var services = new Services_1.default(new ServicesFactory_1.default());
app.use(express_1.default.static(__dirname + '/dist'));
app.use(cookie_parser_1.default());
app.use(body_parser_1.default.json());
app.use(body_parser_1.default.urlencoded({ extended: true }));
app.use(new AuthController_1.default(services).makeRouter());
app.use(new UserController_1.default(services).makeRouter());
app.use(new HelpController_1.default(services).makeRouter());
app.use(new DeveloperController_1.default(services).makeRouter());
app.use(new SubscribeController_1.default(services).makeRouter());
app.use(new RepositoryController_1.default(services).makeRouter());
app.use(new NotifyController_1.default(services).makeRouter());
new RTMController_1.default(services).start();
app.listen(PORT);
